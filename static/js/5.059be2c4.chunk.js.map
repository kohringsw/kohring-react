{"version":3,"sources":["components/Contact/index.js","utils/helpers.js"],"names":["ContactForm","useState","name","email","subject","message","formState","setFormState","errorMessage","setErrorMessage","useForm","handleSubmit","reset","handleChange","e","target","isValid","test","String","toLowerCase","validateEmail","value","length","console","log","onSubmit","data","a","templateParams","emailjs","send","process","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","className","toastId","id","htmlFor","type","defaultValue","onBlur","rows","data-testid","onClick"],"mappings":"oOAsKeA,UA/Jf,WAAwB,IAAD,EACaC,mBAAS,CACzCC,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,QAAS,KALU,mBACdC,EADc,KACHC,EADG,OAQmBN,mBAAS,IAR5B,mBAQdO,EARc,KAQAC,EARA,KASbP,EAAkCI,EAAlCJ,KAAMC,EAA4BG,EAA5BH,MAAOC,EAAqBE,EAArBF,QAASC,EAAYC,EAAZD,QATT,EAUWK,cAAxBC,EAVa,EAUbA,aAAcC,EAVD,EAUCA,MAShBC,EAAe,SAACC,GACpB,GAAsB,UAAlBA,EAAEC,OAAOb,KAAkB,CAC7B,IAAMc,ECxBL,SAAuBb,GAE5B,MADS,wJACCc,KAAKC,OAAOf,GAAOgB,eDsBTC,CAAcN,EAAEC,OAAOM,OAIrCZ,EAHGO,EAGa,GAFA,+BAKbF,EAAEC,OAAOM,MAAMC,OAGlBb,EAAgB,IAFhBA,EAAgB,KAAD,OAAMK,EAAEC,OAAOb,KAAf,kBAKdM,IACHD,EAAa,2BAAKD,GAAN,kBAAkBQ,EAAEC,OAAOb,KAAOY,EAAEC,OAAOM,SACvDE,QAAQC,IAAI,cAAelB,KAiBzBmB,EAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEAGPC,EAAiB,CACrB1B,KAAMA,EACNC,MAAOA,EACPC,QAASA,EACTC,QAASA,GAPE,SAUPwB,IAAQC,KACZC,kBACAA,mBACAH,EACAG,8BAdW,OAZfC,YAAM,wBAAyB,CAC7BC,SAAU,eACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,UAAW,kBACXC,QAAS,gBAII,gDAmBbjB,QAAQC,IAAR,MAnBa,yDAAH,sDAuBd,OACE,oCACE,sBAAKe,UAAU,OAAf,UACE,0BAASA,UAAU,SAAnB,UACE,qBAAKA,UAAU,wCAAf,SACE,oBAAIA,UAAU,oCAAd,8BAGF,qBAAKA,UAAU,OAAf,SACE,qUASJ,uBACEA,UAAU,iBACVE,GAAG,eACHhB,SAAUd,EAAaC,GAHzB,UAKE,sBAAK2B,UAAU,iBAAf,UACE,uBAAOG,QAAQ,OAAf,mBACA,uBACEC,KAAK,OACLzC,KAAK,OACLqC,UAAU,eACVK,aAAc1C,EACd2C,OAAQhC,OAGZ,sBAAK0B,UAAU,iBAAf,UACE,uBAAOG,QAAQ,QAAf,4BACA,uBACEC,KAAK,QACLzC,KAAK,QACLqC,UAAU,eACVK,aAAczC,EACd0C,OAAQhC,OAGZ,sBAAK0B,UAAU,iBAAf,UACE,uBAAOG,QAAQ,QAAf,sBACA,uBACEC,KAAK,OACLzC,KAAK,UACLqC,UAAU,eACVK,aAAcxC,EACdyC,OAAQhC,OAGZ,sBAAK0B,UAAU,iBAAf,UACE,uBAAOG,QAAQ,UAAf,sBACA,0BACExC,KAAK,UACLqC,UAAU,eACVO,KAAK,IACLF,aAAcvC,EACdwC,OAAQhC,OAGXL,GACC,8BACE,mBAAG+B,UAAU,kBAAb,SAAgC/B,MAGpC,wBACEuC,cAAY,SACZJ,KAAK,SACLJ,UAAU,kEACVS,QAASvB,EAJX,0BAUJ,cAAC,IAAD","file":"static/js/5.059be2c4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport emailjs from \"emailjs-com\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport { validateEmail } from \"../../utils/helpers\";\n\nfunction ContactForm() {\n  const [formState, setFormState] = useState({\n    name: \"\",\n    email: \"\",\n    subject: \"\",\n    message: \"\",\n  });\n\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const { name, email, subject, message } = formState;\n  const { handleSubmit, reset } = useForm();\n\n  // const handleSubmit = (e) => {\n  //   e.preventDefault();\n  //   if (!errorMessage) {\n  //     console.log(\"Submit Form\", formState);\n  //   }\n  // };\n\n  const handleChange = (e) => {\n    if (e.target.name === \"email\") {\n      const isValid = validateEmail(e.target.value);\n      if (!isValid) {\n        setErrorMessage(\"Your email is invalid.\");\n      } else {\n        setErrorMessage(\"\");\n      }\n    } else {\n      if (!e.target.value.length) {\n        setErrorMessage(`A ${e.target.name} is required.`);\n      } else {\n        setErrorMessage(\"\");\n      }\n    }\n    if (!errorMessage) {\n      setFormState({ ...formState, [e.target.name]: e.target.value });\n      console.log(\"Handle Form\", formState);\n    }\n  };\n\n  const toastifySuccess = () => {\n    toast(\"Form sent, thank you!\", {\n      position: \"bottom-right\",\n      autoClose: 5000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: false,\n      className: \"submit-feedback\",\n      toastId: \"notifyToast\",\n    });\n  };\n\n  const onSubmit = async (data) => {\n    // Send form email\n    try {\n      const templateParams = {\n        name: name,\n        email: email,\n        subject: subject,\n        message: message,\n      };\n\n      await emailjs.send(\n        process.env.REACT_APP_SERVICE_ID,\n        process.env.REACT_APP_TEMPLATE_ID,\n        templateParams,\n        process.env.REACT_APP_USER_ID\n      );\n\n      toastifySuccess();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <section>\n      <div className=\"mb-5\">\n        <section className=\"col-12\">\n          <div className=\"contact d-flex justify-content-center\">\n            <h1 className=\"m-5 font-weight-light text-center\">CONTACT SHELBY</h1>\n          </div>\n\n          <div className=\"mx-5\">\n            <p>\n              What design needs do you have for your business or organization?\n              Whether it's a new logo or rebranding an existing one, building a\n              new website or updating what you have now—whatever it is you're\n              looking for—reach out to Shelby for a free quote. Just use the\n              contact form below.\n            </p>\n          </div>\n        </section>\n        <form\n          className=\"form-group m-5\"\n          id=\"contact-form\"\n          onSubmit={handleSubmit(reset)}\n        >\n          <div className=\"form-group col\">\n            <label htmlFor=\"name\">Name:</label>\n            <input\n              type=\"text\"\n              name=\"name\"\n              className=\"form-control\"\n              defaultValue={name}\n              onBlur={handleChange}\n            ></input>\n          </div>\n          <div className=\"form-group col\">\n            <label htmlFor=\"email\">Email address:</label>\n            <input\n              type=\"email\"\n              name=\"email\"\n              className=\"form-control\"\n              defaultValue={email}\n              onBlur={handleChange}\n            ></input>\n          </div>\n          <div className=\"form-group col\">\n            <label htmlFor=\"email\">Subject:</label>\n            <input\n              type=\"text\"\n              name=\"subject\"\n              className=\"form-control\"\n              defaultValue={subject}\n              onBlur={handleChange}\n            ></input>\n          </div>\n          <div className=\"form-group col\">\n            <label htmlFor=\"message\">Message:</label>\n            <textarea\n              name=\"message\"\n              className=\"form-control\"\n              rows=\"7\"\n              defaultValue={message}\n              onBlur={handleChange}\n            ></textarea>\n          </div>\n          {errorMessage && (\n            <div>\n              <p className=\"error-text ml-3\">{errorMessage}</p>\n            </div>\n          )}\n          <button\n            data-testid=\"button\"\n            type=\"submit\"\n            className=\"contact-button btn btn-block btn-secondary mt-4 ml-3 text-white\"\n            onClick={onSubmit}\n          >\n            Submit\n          </button>\n        </form>\n      </div>\n      <ToastContainer />\n    </section>\n  );\n}\n\nexport default ContactForm;\n","export function capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function validateEmail(email) {\n  var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}"],"sourceRoot":""}